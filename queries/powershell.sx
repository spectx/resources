init(
 //  from:now()[-14 day], 
   from:T('2020-03-14 00:00:00.000'),
   to:now()[+1 min]
);

$pattern = <<<PATTERN
   $eol=(EOLWIN | EOL);
   $asteriskLine='**********************' $eol;
   $prologue=
   $asteriskLine
   ('Windows PowerShell' | 'PowerShell') ' transcript start' $eol
   'Start time: ' TIMESTAMP('yyyyMMddHHmmss'):startTime $eol
   KVP{LD:key ': ' LD*:value $eol}:props
   $asteriskLine
   ;
   $epilogue=
   $asteriskLine
   ('Windows PowerShell' | 'PowerShell') ' transcript end' $eol
   'End time: ' TIMESTAMP('yyyyMMddHHmmss'):endTime $eol
   $asteriskLine
   ;
   $commandStartTime=
   $asteriskLine
   'Command start time: ' TIMESTAMP('yyyyMMddHHmmss'):commandStartTime $eol
   $asteriskLine
   ;
   $commandText=
   <<$asteriskLine                 // look behind for asterisk line
   DATA{0,10485760}:commandText    // maximum 10MB
   // match until $eol followed by next prologue, epilogue, commandStartTime or EndOfFile (EOF)
   ($eol >>($prologue | $epilogue | $commandStartTime | EOF)) 
   /*    
   !!! note that the commandText is not sanitized and may contain "fake" asterisk line 
   and other elements resembling technical blocks (prologue, epilogue, commandStart). !!!
   */  
   ;
   (
   // File must start with prologue, optionally with unicode endian sequence
   (BOF '\ufeff'? $prologue:prologue)
   // Next record must be one from list (prologue, epilogue, commandText with optional commandStartTime)
   | ($prologue:prologue | $epilogue:epilogue | ($commandStartTime? $commandText))
   )
PATTERN;


LIST(src:'s3s://spectx-docs/logs/windows/powershell_transcripts/$yyyy$$MM$$dd$/PowerShell_transcript.*.$yyyy$$MM$$dd$$HH$$mm$$ss$.txt')
	| filter(path_time >= $from[-1 day] and path_time <= $to[+1 day]) // filter selected days 

| parse(pattern:$pattern)
| select(prologue:keep(prologue), *)
| select(start_time:prologue[startTime],
	end_time:epilogue[endTime],
	Username:prologue[props][Username] ,
	RunAs_User:prologue[props][RunAs User],
	Machine:prologue[props][Machine],
	Host_Application:prologue[props][Host Application],
	PID:INT(prologue[props][Process ID]),
	PSVersion:string(prologue[props][PSVersion]),
	PSEdition:string(prologue[props][PSEdition]),
	PSCompatibleVersions:string(prologue[props][PSCompatibleVersions]),
	BuildVersion:string(prologue[props][BuildVersion]),
	CLRVersion:string(prologue[props][CLRVersion]),
	WSManStackVersion:string(prologue[props][WSManStackVersion]),
	PSRemotingProtocolVersion:string(prologue[props][PSRemotingProtocolVersion]),
	SerializationVersion:string(prologue[props][SerializationVersion]),
	*)
	
| select(*,command_value:parse("(EOL|WINEOL)? LD:command (((WINEOL|EOL) DATA{0,10485760}:output)|EOS) ",commandText))
| select(*,command:command_value[command],output:command_value[output]) 
| unselect(prologue,epilogue,command_value)
| sort(start_time DESC)
